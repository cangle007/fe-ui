@use "sass:color";
@use 'fe-variables/variables/palette';

.root {
  display: inline-block;
  position: relative;
  appearance: none;
  border: none;
  border-radius: 8px;
  color: palette.$white;
  cursor: pointer;
  font-size: 18px;
  outline: none;
  padding: 0;
  margin: 0;
  text-decoration: none;
  transition: 0.2s;
  user-select: none;

  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }
}

.primary {
  background-color: palette.$primary;

  &:not([disabled]) {
    &:hover {
      background-color: color.adjust(palette.$primary, $lightness: -10%);
      border-color: color.adjust(palette.$primary, $lightness: -10%);
    }
  }

  &:not([disabled]) {
    &:active {
      background-color: color.adjust(palette.$primary, $lightness: 5%);
      border-color: color.adjust(palette.$primary, $lightness: 5%);
    }
  }
}

.secondary {
  border: 2px solid palette.$primary;
  background-color: palette.$white;
  color: palette.$primary;

  &:not([disabled]) {
    &:hover {
      background-color: color.adjust(palette.$primary, $lightness: 42%);
    }
  }

  &:not([disabled]) {
    &:active {
      background-color: color.adjust(palette.$primary, $lightness: 48%);
    }
  }

  &:disabled {
    background-color: transparent;
    border-color: palette.$neutral-4;
  }
}

.success {
  background-color: palette.$success;

  &:not([disabled]) {
    &:hover {
      background-color: color.adjust(palette.$success, $lightness: -10%);
      border-color: color.adjust(palette.$success, $lightness: -10%);
    }
  }

  &:not([disabled]) {
    &:active {
      background-color: color.adjust(palette.$success, $lightness: 5%);
      border-color: color.adjust(palette.$success, $lightness: 5%);
    }
  }
}

.error {
  background-color: palette.$error;

  &:not([disabled]) {
    &:hover {
      background-color: color.adjust(palette.$error, $lightness: -10%);
      border-color: color.adjust(palette.$error, $lightness: -10%);
    }
  }

  &:not([disabled]) {
    &:active {
      background-color: color.adjust(palette.$error, $lightness: 5%);
      border-color: color.adjust(palette.$error, $lightness: 5%);
    }
  }
}

.loading {
  background-color: palette.$neutral-1;
  border: 2px solid palette.$neutral-4;
  color: palette.$neutral-5;
  pointer-events: none;

  &::after {
    content: '';
    position: absolute;
    width: 17px;
    height: 17px;
    margin-left: 10px;
    opacity: 1;
    background: transparent;
    border-top: 4px solid palette.$primary;
    border-right: 4px solid transparent;
    border-radius: 50%;
    -webkit-animation: 1s spin linear infinite;
    animation: 1s spin linear infinite;
  }

  &:disabled {
    opacity: 1;
  }

  &.sm {
    padding-right: 40px;
  }
  &.md {
    padding-right: 46px;
  }
  &.lg {
    padding-right: 62px;
  }
}

.block {
  display: block;
  width: 100%;
}

.sm {
  font-size: 16px;
  padding: 8px 15px;
  border-radius: 6px;
}

.md {
  font-size: 18px;
  padding: 14px 21px;
}

.lg {
  font-size: 19px;
  padding: 16px 29px;
  line-height: 1.1;
}

// for loading spinner
@-webkit-keyframes spin {
  from {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  to {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}

@keyframes spin {
  from {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  to {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
